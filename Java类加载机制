Java类的加载机制：

虽然在平时的工作中，不会关心类是怎么加载的，什么时间进行类的初始化，变量初始化，但了解了虚拟机中类的加载机制，能帮助我们更深入的了解代码的实现，更方便的解决工程中故障。
类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括七个部分：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)。
其中准备、验证、解析3个部分统称为连接（Linking）。

下面分析一下这七个生命周期分别完成什么任务：

加载阶段：
    通过一个类的全限定名来获取定义此类的二进制字节流（获取方式可通过：网络、动态生成、数据库等）；
    将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；
    在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；
验证阶段：
    验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。
    文件格式验证：验证字节流是否符合Class文件格式的规范；
    元数据验证：对字节码描述的信息进行语义分析（，以保证其描述的信息符合Java语言规范的要求；
    字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。
    符号引用验证：确保解析动作能正确执行。
准备阶段
   正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。
   这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。
   其次，这里所说的初始值“通常情况”下是数据类型的零值，比如定义一个变量value=123;其实在该阶段，并未对value赋值为123，而是0。
   但在特殊情况下例外，至于“特殊情况”是指：当值标注为final之后，成为常量，value的值在准备阶段初始化为123而非0.
解析阶段
   虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符
   7类符号引用进行。
初始化阶段：
     类初始化阶段是类加载过程的最后一步，到了初始化阶段，才真正开始执行类中定义的java程序代码。在准备阶段，只是将变量赋值为系统的初始          
     值，而在初始化阶段，则根据程序猿通过程序制定的主管计划去初始化类变量和其他资源.

使用阶段：省略.   
卸载阶段：
    在这一阶段，主要完成将类从内存虚拟机中清除的过程。进行内存的回收工作。
